#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('tasks:server');
var http = require('http');
const companion = require('@uppy/companion');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '2003');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
const UPPY_OPTIONS = {
  filePath: '/',
  server: {
    protocol: !!Number(process.env.DEBUG) ? 'http' : 'https',
    host: process.env.DOMAIN,
    path: '/companion',
  },
  secret: process.env.SECRET,
  debug: !!Number(process.env.DEBUG),
  s3: {
    getKey: (req, fileName) => `${Date.now()}/${fileName.split(' ').join('_')}`,
    key: process.env.S3_KEY,
    secret: process.env.S3_SECRET,
    bucket: process.env.S3_BUCKET,
    endpoint: process.env.S3_ENDPOINT,
    region: 'us-east-1',
    acl: process.env.COMPANION_AWS_ACL || 'public-read',
  },
  corsOrigins: process.env.COMPANION_CLIENT_ORIGINS,
};
companion.socket(server);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
